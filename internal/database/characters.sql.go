// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: characters.sql

package database

import (
	"context"

	"github.com/google/uuid"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO characters(id, user_id, name, created_at, updated_at)
VALUES (
	gen_random_uuid(),
	$1,
	$2,
	NOW(),
	NOW()
)
RETURNING id, user_id, name, position_x, position_y, action_id, action_target, created_at, updated_at
`

type CreateCharacterParams struct {
	UserID uuid.UUID
	Name   string
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRowContext(ctx, createCharacter, arg.UserID, arg.Name)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.PositionX,
		&i.PositionY,
		&i.ActionID,
		&i.ActionTarget,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCharacterById = `-- name: GetCharacterById :one
SELECT id, user_id, name, position_x, position_y, action_id, action_target, created_at, updated_at from characters
WHERE id = $1
`

func (q *Queries) GetCharacterById(ctx context.Context, id uuid.UUID) (Character, error) {
	row := q.db.QueryRowContext(ctx, getCharacterById, id)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.PositionX,
		&i.PositionY,
		&i.ActionID,
		&i.ActionTarget,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
