// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: resources.sql

package database

import (
	"context"
)

const createResource = `-- name: CreateResource :exec
INSERT INTO resources (resource_node_id, item_id, drop_chance) VALUES ($1, $2, $3)
`

type CreateResourceParams struct {
	ResourceNodeID int32
	ItemID         int32
	DropChance     int32
}

func (q *Queries) CreateResource(ctx context.Context, arg CreateResourceParams) error {
	_, err := q.db.Exec(ctx, createResource, arg.ResourceNodeID, arg.ItemID, arg.DropChance)
	return err
}

const getResourcesByNodeId = `-- name: GetResourcesByNodeId :many
SELECT id, resource_node_id, item_id, drop_chance FROM resources
WHERE resource_node_id = $1
`

func (q *Queries) GetResourcesByNodeId(ctx context.Context, resourceNodeID int32) ([]Resource, error) {
	rows, err := q.db.Query(ctx, getResourcesByNodeId, resourceNodeID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Resource
	for rows.Next() {
		var i Resource
		if err := rows.Scan(
			&i.ID,
			&i.ResourceNodeID,
			&i.ItemID,
			&i.DropChance,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
