// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: actions.sql

package database

import (
	"context"
)

const getActionById = `-- name: GetActionById :one
SELECT id, name FROM actions
WHERE id = $1
`

func (q *Queries) GetActionById(ctx context.Context, id int32) (Action, error) {
	row := q.db.QueryRow(ctx, getActionById, id)
	var i Action
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getActionByName = `-- name: GetActionByName :one
SELECT id, name FROM actions
WHERE name = $1
`

func (q *Queries) GetActionByName(ctx context.Context, name string) (Action, error) {
	row := q.db.QueryRow(ctx, getActionByName, name)
	var i Action
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const getAllActions = `-- name: GetAllActions :many
SELECT id, name FROM actions
`

func (q *Queries) GetAllActions(ctx context.Context) ([]Action, error) {
	rows, err := q.db.Query(ctx, getAllActions)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Action
	for rows.Next() {
		var i Action
		if err := rows.Scan(&i.ID, &i.Name); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
