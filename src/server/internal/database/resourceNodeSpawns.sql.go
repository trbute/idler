// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: resourceNodeSpawns.sql

package database

import (
	"context"
)

const createResourceNodeSpawn = `-- name: CreateResourceNodeSpawn :exec
INSERT INTO resource_node_spawns (node_id, position_x, position_y) VALUES ($1, $2, $3)
`

type CreateResourceNodeSpawnParams struct {
	NodeID    int32
	PositionX int32
	PositionY int32
}

func (q *Queries) CreateResourceNodeSpawn(ctx context.Context, arg CreateResourceNodeSpawnParams) error {
	_, err := q.db.Exec(ctx, createResourceNodeSpawn, arg.NodeID, arg.PositionX, arg.PositionY)
	return err
}

const getResourceNodeSpawns = `-- name: GetResourceNodeSpawns :many
SELECT id, node_id, position_x, position_y FROM resource_node_spawns
`

func (q *Queries) GetResourceNodeSpawns(ctx context.Context) ([]ResourceNodeSpawn, error) {
	rows, err := q.db.Query(ctx, getResourceNodeSpawns)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ResourceNodeSpawn
	for rows.Next() {
		var i ResourceNodeSpawn
		if err := rows.Scan(
			&i.ID,
			&i.NodeID,
			&i.PositionX,
			&i.PositionY,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
