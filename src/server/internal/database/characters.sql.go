// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: characters.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createCharacter = `-- name: CreateCharacter :one
INSERT INTO characters(id, user_id, name, created_at, updated_at)
VALUES (
	gen_random_uuid(),
	$1,
	$2,
	NOW(),
	NOW()
)
RETURNING id, user_id, name, position_x, position_y, action_id, action_target, created_at, updated_at
`

type CreateCharacterParams struct {
	UserID pgtype.UUID
	Name   string
}

func (q *Queries) CreateCharacter(ctx context.Context, arg CreateCharacterParams) (Character, error) {
	row := q.db.QueryRow(ctx, createCharacter, arg.UserID, arg.Name)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.PositionX,
		&i.PositionY,
		&i.ActionID,
		&i.ActionTarget,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getActiveCharacters = `-- name: GetActiveCharacters :many
SELECT id, user_id, name, position_x, position_y, action_id, action_target, created_at, updated_at FROM characters
WHERE action_id != 0
`

func (q *Queries) GetActiveCharacters(ctx context.Context) ([]Character, error) {
	rows, err := q.db.Query(ctx, getActiveCharacters)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.PositionX,
			&i.PositionY,
			&i.ActionID,
			&i.ActionTarget,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getCharacterById = `-- name: GetCharacterById :one
SELECT id, user_id, name, position_x, position_y, action_id, action_target, created_at, updated_at from characters
WHERE id = $1
`

func (q *Queries) GetCharacterById(ctx context.Context, id pgtype.UUID) (Character, error) {
	row := q.db.QueryRow(ctx, getCharacterById, id)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.PositionX,
		&i.PositionY,
		&i.ActionID,
		&i.ActionTarget,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCharacterByName = `-- name: GetCharacterByName :one
SELECT id, user_id, name, position_x, position_y, action_id, action_target, created_at, updated_at from characters
where name = $1
`

func (q *Queries) GetCharacterByName(ctx context.Context, name string) (Character, error) {
	row := q.db.QueryRow(ctx, getCharacterByName, name)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.PositionX,
		&i.PositionY,
		&i.ActionID,
		&i.ActionTarget,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getCharactersByCoordinates = `-- name: GetCharactersByCoordinates :many
SELECT id, user_id, name, position_x, position_y, action_id, action_target, created_at, updated_at from characters
WHERE position_x = $1 AND position_y = $2
`

type GetCharactersByCoordinatesParams struct {
	PositionX int32
	PositionY int32
}

func (q *Queries) GetCharactersByCoordinates(ctx context.Context, arg GetCharactersByCoordinatesParams) ([]Character, error) {
	rows, err := q.db.Query(ctx, getCharactersByCoordinates, arg.PositionX, arg.PositionY)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Character
	for rows.Next() {
		var i Character
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Name,
			&i.PositionX,
			&i.PositionY,
			&i.ActionID,
			&i.ActionTarget,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateCharacterById = `-- name: UpdateCharacterById :one
UPDATE characters
SET action_id = $1, 
	updated_at = NOW()
WHERE id = $2
RETURNING id, user_id, name, position_x, position_y, action_id, action_target, created_at, updated_at
`

type UpdateCharacterByIdParams struct {
	ActionID int32
	ID       pgtype.UUID
}

func (q *Queries) UpdateCharacterById(ctx context.Context, arg UpdateCharacterByIdParams) (Character, error) {
	row := q.db.QueryRow(ctx, updateCharacterById, arg.ActionID, arg.ID)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.PositionX,
		&i.PositionY,
		&i.ActionID,
		&i.ActionTarget,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCharacterByIdWithTarget = `-- name: UpdateCharacterByIdWithTarget :one
UPDATE characters
SET action_id = $1,
	action_target = $2,
	updated_at = NOW()
WHERE id = $3
RETURNING id, user_id, name, position_x, position_y, action_id, action_target, created_at, updated_at
`

type UpdateCharacterByIdWithTargetParams struct {
	ActionID     int32
	ActionTarget pgtype.Int4
	ID           pgtype.UUID
}

func (q *Queries) UpdateCharacterByIdWithTarget(ctx context.Context, arg UpdateCharacterByIdWithTargetParams) (Character, error) {
	row := q.db.QueryRow(ctx, updateCharacterByIdWithTarget, arg.ActionID, arg.ActionTarget, arg.ID)
	var i Character
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Name,
		&i.PositionX,
		&i.PositionY,
		&i.ActionID,
		&i.ActionTarget,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
