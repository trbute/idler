// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: inventories.sql

package database

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createInventory = `-- name: CreateInventory :one
INSERT INTO inventories(id, character_id, position_x, position_y, capacity, created_at, updated_at)
VALUES (
	gen_random_uuid(),
	$1,
	$2,
	$3,
	$4,
	NOW(),
	NOW()
)
RETURNING id, character_id, position_x, position_y, weight, capacity, created_at, updated_at
`

type CreateInventoryParams struct {
	CharacterID pgtype.UUID
	PositionX   int32
	PositionY   int32
	Capacity    int32
}

func (q *Queries) CreateInventory(ctx context.Context, arg CreateInventoryParams) (Inventory, error) {
	row := q.db.QueryRow(ctx, createInventory,
		arg.CharacterID,
		arg.PositionX,
		arg.PositionY,
		arg.Capacity,
	)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.PositionX,
		&i.PositionY,
		&i.Weight,
		&i.Capacity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInventory = `-- name: GetInventory :one
SELECT id, character_id, position_x, position_y, weight, capacity, created_at, updated_at FROM inventories
WHERE id = $1
`

func (q *Queries) GetInventory(ctx context.Context, id pgtype.UUID) (Inventory, error) {
	row := q.db.QueryRow(ctx, getInventory, id)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.PositionX,
		&i.PositionY,
		&i.Weight,
		&i.Capacity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getInventoryByCharacterId = `-- name: GetInventoryByCharacterId :one
SELECT id, character_id, position_x, position_y, weight, capacity, created_at, updated_at FROM inventories
WHERE character_id = $1
`

func (q *Queries) GetInventoryByCharacterId(ctx context.Context, characterID pgtype.UUID) (Inventory, error) {
	row := q.db.QueryRow(ctx, getInventoryByCharacterId, characterID)
	var i Inventory
	err := row.Scan(
		&i.ID,
		&i.CharacterID,
		&i.PositionX,
		&i.PositionY,
		&i.Weight,
		&i.Capacity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateInventoryWeight = `-- name: UpdateInventoryWeight :exec
UPDATE inventories
SET weight = weight + $2, updated_at = NOW()
WHERE id = $1
`

type UpdateInventoryWeightParams struct {
	ID     pgtype.UUID
	Weight int32
}

func (q *Queries) UpdateInventoryWeight(ctx context.Context, arg UpdateInventoryWeightParams) error {
	_, err := q.db.Exec(ctx, updateInventoryWeight, arg.ID, arg.Weight)
	return err
}
