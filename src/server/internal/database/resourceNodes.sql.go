// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: resourceNodes.sql

package database

import (
	"context"
)

const createResourceNode = `-- name: CreateResourceNode :exec
INSERT INTO resource_nodes (name, action_id, tier) VALUES ($1, $2, $3)
`

type CreateResourceNodeParams struct {
	Name     string
	ActionID int32
	Tier     int32
}

func (q *Queries) CreateResourceNode(ctx context.Context, arg CreateResourceNodeParams) error {
	_, err := q.db.Exec(ctx, createResourceNode, arg.Name, arg.ActionID, arg.Tier)
	return err
}

const getResourceNodeById = `-- name: GetResourceNodeById :one
SELECT id, name, action_id, tier FROM resource_nodes WHERE id = $1
`

func (q *Queries) GetResourceNodeById(ctx context.Context, id int32) (ResourceNode, error) {
	row := q.db.QueryRow(ctx, getResourceNodeById, id)
	var i ResourceNode
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ActionID,
		&i.Tier,
	)
	return i, err
}

const getResourceNodeByName = `-- name: GetResourceNodeByName :one
SELECT id, name, action_id, tier FROM resource_nodes WHERE name = $1
`

func (q *Queries) GetResourceNodeByName(ctx context.Context, name string) (ResourceNode, error) {
	row := q.db.QueryRow(ctx, getResourceNodeByName, name)
	var i ResourceNode
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.ActionID,
		&i.Tier,
	)
	return i, err
}
