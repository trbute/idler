services:
  db:
    image: postgres:15-alpine  # Smaller, faster startup than latest
    environment:
      POSTGRES_USER: ${DB_USER}
      POSTGRES_PASSWORD: ${DB_PASSWORD}
      POSTGRES_DB: ${DB_NAME}
      POSTGRES_INITDB_ARGS: "--auth-host=trust"  # Skip password auth for faster init in dev
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER} -d ${DB_NAME}"]
      interval: 2s  # Check more frequently
      timeout: 2s   # Faster timeout
      retries: 10   # More retries but faster intervals
      start_period: 5s  # Give initial startup time
    ports:
      - "${DB_PORT}:${DB_PORT}"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    # Performance optimizations for development
    command: >
      postgres 
      -c shared_preload_libraries=''
      -c max_connections=50
      -c shared_buffers=128MB
      -c effective_cache_size=256MB
      -c maintenance_work_mem=32MB
      -c checkpoint_completion_target=0.9
      -c wal_buffers=16MB
      -c default_statistics_target=100

  server:
    build:
      context: src/server/
      dockerfile: Dockerfile
    depends_on:
      db:
        condition: service_healthy
      migrate:
        condition: service_completed_successfully
    environment:
      DB_HOST: db
      DB_NAME: ${DB_NAME}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_PORT: ${DB_PORT}
      REDIS_ADDRESS: ${REDIS_ADDRESS}
      REDIS_PORT: ${REDIS_PORT}
      REDIS_PASSWORD: ${REDIS_PASSWORD}
      JWT_SECRET: ${JWT_SECRET}
      TICK_MS: ${TICK_MS}
    ports:
      - "8080:8080"

  client:
    build:
      context: src/client/
      dockerfile: Dockerfile
    depends_on:
      - server  # Client only needs server, not DB or migrations
    environment:
      CLIENT_HOST: ${CLIENT_HOST}
      CLIENT_PORT: ${CLIENT_PORT}
      API_URL:  ${API_URL}
      WS_URL: ws://server:8080/ws
    ports:
      - "${CLIENT_PORT}:${CLIENT_PORT}"

  migrate:
    build:
      context: .
      dockerfile: migrate.dockerfile
    depends_on:
      db:
        condition: service_healthy
    environment:
      DB_PORT: ${DB_PORT}
      DB_USER: ${DB_USER}
      DB_PASSWORD: ${DB_PASSWORD}
      DB_NAME: ${DB_NAME}
    volumes:
      - ./src/server/sql/schema:/migrations
    command: >
      goose -dir /migrations postgres 
      "postgres://${DB_USER}:${DB_PASSWORD}@db:${DB_PORT}/${DB_NAME}?sslmode=disable" 
      up

  redis:
    image: redis:7-alpine  # Smaller, faster startup than latest
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD} --maxmemory 256mb --maxmemory-policy allkeys-lru
    healthcheck:
      test: ["CMD-SHELL", "redis-cli -a ${REDIS_PASSWORD} ping | grep PONG"]
      interval: 2s  # Check more frequently
      timeout: 2s   # Faster timeout
      retries: 10   # More retries but faster intervals
      start_period: 3s  # Give initial startup time
    ports:
      - "${REDIS_PORT}:6379"
    volumes:
      - redis_data:/data


volumes:
  postgres_data:
  redis_data:
